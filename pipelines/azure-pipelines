# Azure DevOps pipeline for Azure deployment
trigger: none
# variables:
# - group: Keyvault

# trigger:
#   branches:
#     include:
#     - main
variables:
- group: Keyvault

# trigger:
#   branches:
#     include:
#     - main
#   paths:
#     include:
#     - Central IAC Project Test/vnet

stages:
- stage: Validate
  displayName: Validate
  jobs:
  - job: validate
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          python -V
          sudo apt install python3-testresources
    # Install Checkov
    - bash: pip3 install checkov
      displayName: 'Install checkov'
      name: 'install_checkov'

    # Azure Key Vault
    # Download Azure Key Vault secrets

    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'SMBCLAB'
        KeyVaultName: 'terraffirniac-kv'
        SecretsFilter: '*'
        RunAsPreJob: false
    - task: CmdLine@2
      inputs:
        script: |
          export TF_VAR_VMTOKEN=$(testVMToken)

    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    # Init
    - task: CmdLine@2
      inputs:
        script: |
          cd "$(System.DefaultWorkingDirectory)"
          ls -R
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers'
        backendServiceArm: 'SMBCLAB'
        backendAzureRmResourceGroupName: 'TerraformIACTest'
        backendAzureRmStorageAccountName: 'terraformiactest'
        backendAzureRmContainerName: 'statefiles'
        backendAzureRmKey: 'staging/terraform_CM.tfstate'
      env:
        TF_VAR_VMTOKEN: $(testVMToken)

  # Validate
    - task: TerraformTaskV2@2
      displayName: Validate Config
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers'
        environmentServiceNameAzureRM: 'SMBCLAB'
      env:
        TF_VAR_VMTOKEN: $(testVMToken)

  # Verify module files with Checkov
    - bash: checkov --directory $(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers.terraform --skip-check CKV_DOCKER_* -o junitxml > $(System.DefaultWorkingDirectory)/Checkov-Module-Report.xml
      displayName: 'Verify modules with Checkov'
      name: 'checkov_module_check'

  # Publish test results for modules
  # Shout out to Adin Ermie for this one! https://adinermie.com/publishing-checkov-terraform-quality-checks-to-azure-devops-pipelines/
    - task: PublishTestResults@2
      displayName: Publish Checkov Module Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*Checkov-Module-Report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: Checkov Module Scan
        failTaskOnFailedTests: false
        publishRunAttachments: true

  # Verify main files with Checkov
    - bash: checkov --directory $(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers -o junitxml > $(System.DefaultWorkingDirectory)/Checkov-Root-Report.xml
      displayName: 'Verify root module with Checkov'
      name: 'checkov_root_check'
      continueOnError: true

  # Publish test results for root module
    - task: PublishTestResults@2
      displayName: Publish Checkov Root Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*Checkov-Root-Report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: Checkov Root Scan
        failTaskOnFailedTests: false
        publishRunAttachments: true
    
- stage: Plan
  displayName: Plan
  jobs:
  - job: plan
    pool:
      vmImage: ubuntu-latest
    steps:
    # Install Checkov
    - bash: pip3 install checkov
      displayName: 'Install checkov'
      name: 'install_checkov'

    # Azure Key Vault
    # Download Azure Key Vault secrets
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'SMBCLAB'
        KeyVaultName: 'terraffirniac-kv'
        SecretsFilter: '*'
        RunAsPreJob: false
    - task: CmdLine@2
      inputs:
        script: |
          export TF_VAR_VMTOKEN=$(testVMToken)
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers'
        backendServiceArm: 'SMBCLAB'
        backendAzureRmResourceGroupName: 'TerraformIACTest'
        backendAzureRmStorageAccountName: 'terraformiactest'
        backendAzureRmContainerName: 'statefiles'
        backendAzureRmKey: 'staging/terraform_CM.tfstate'
      env:
        TF_VAR_VMTOKEN: $(testVMToken)
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers/main.tfplan'
        environmentServiceNameAzureRM: 'SMBCLAB'
      env:
        TF_VAR_VMTOKEN: $(testVMToken)

  # Verify plan with Checkov
    - bash: |
        cd $(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers
        ls
        terraform show -json main.tfplan > $(System.DefaultWorkingDirectory)/main.json
        checkov -f $(System.DefaultWorkingDirectory)/main.json -o junitxml > $(System.DefaultWorkingDirectory)/Checkov-Plan-Report.xml
      displayName: 'Verify plan with Checkov'
      name: 'checkov_plan_check'
      env:
        ARM_SAS_TOKEN: $(storageSastoken)
        ARM_CLIENT_ID: $(az-client-id)
        ARM_CLIENT_SECRET: $(az-client-secret)
        ARM_SUBSCRIPTION_ID: $(az-subscription)
        ARM_TENANT_ID: $(az-tenant)
      continueOnError: true

  # Publish test results for plan
    - task: PublishTestResults@2
      displayName: Publish Checkov Plan Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*Checkov-Plan-Report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: Checkov Plan Scan
        failTaskOnFailedTests: false
        publishRunAttachments: true

# Approve
- stage: Approve
  displayName: Approve
  jobs:
  - job: approve
    displayName: Wait for approval
    pool: server
    steps: 
    - task: ManualValidation@0
      timeoutInMinutes: 120
      inputs:
        notifyUsers: 'nminis@jri-america.com' #change to real emails
        instructions: 'Review the plan in the next hour'

- stage: Apply
  displayName: Apply
  jobs:
  - job: apply
    pool:
      vmImage: ubuntu-latest
    steps:

    # Azure Key Vault
    # Download Azure Key Vault secrets
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'SMBCLAB'
        KeyVaultName: 'terraffirniac-kv'
        SecretsFilter: '*'
        RunAsPreJob: false
    - task: CmdLine@2
      inputs:
        script: |
          export TF_VAR_VMTOKEN=$(testVMToken)
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
  # Init
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers'
        backendServiceArm: 'SMBCLAB'
        backendAzureRmResourceGroupName: 'TerraformIACTest'
        backendAzureRmStorageAccountName: 'terraformiactest'
        backendAzureRmContainerName: 'statefiles'
        backendAzureRmKey: 'staging/terraform_CM.tfstate'
      env:
        TF_VAR_VMTOKEN: $(testVMToken)
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers/main.tfplan'
        environmentServiceNameAzureRM: 'SMBCLAB'
      env:
        TF_VAR_VMTOKEN: $(testVMToken)
  # Apply
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/staging/CM_Nice_Servers'
        environmentServiceNameAzureRM: 'SMBCLAB'
      env:
        TF_VAR_VMTOKEN: $(testVMToken)







